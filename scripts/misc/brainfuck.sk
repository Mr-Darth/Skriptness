# Simple Brainfuck interpreter
#
# A naive Brainfuck interpreter written in Skript for fun.
# This supports all commands of the original language except the "," element.
#
# For more information about the esoteric language "Brainfuck", see:
# https://en.wikipedia.org/wiki/Brainfuck

# Authored by Mr. Darth.
# Tested using Skript 2.6.3 and skript-reflect 2.3 on Paper 1.18.2.



import:
	java.lang.Character

# Local expression to convert an integer codepoint to a character.
local expression character from [code[ ]point] %number%:
	return type: string
	get:
		return Character.toChars(expr-1)[0].toString()

# Executes the given Brainfuck code and returns the resulting output.
# Parameters:
# * string: the input code to execute
# Returns: a string which is the output of the code
function brainfuck(input: string) :: string:

	set {_depth} to 0       # The depth in nested loops
	set {_reader} to 0      # The current position in the input string
	set {_pointer} to 0     # The index of the current cell

	# Read until the end of the input string
	while {_reader} < length of {_input}:

		# Read next character
		add 1 to {_reader}
		set {_instruction} to character at {_reader} of {_input}

		# Increment pointer (move to the right)
		if {_instruction} is ">":
			add 1 to {_pointer}
		# Decrement pointer (move to the left)
		else if {_instruction} is "<":
			remove 1 from {_pointer}

		# Increment data (increment the value at the pointer by 1)
		else if {_instruction} is "+":
			add 1 to {_data::%{_pointer}%}
		# Decrement data (decrement the value at the pointer by 1)
		else if {_instruction} is "-":
			remove 1 from {_data::%{_pointer}%}

		# Loop head
		else if {_instruction} is "[":

			# Skip loop if data is zero
			if {_data::%{_pointer}%} ? 0 is 0:

				# Move reader to end of loop
				add 1 to {_reader}
				loop (length of {_input}) - {_reader} times:
					set {_instruction} to character at {_reader} of {_input}
					if {_instruction} is "]":
						exit this loop if {_depth} <= 0
						remove 1 from {_depth}
					else if {_instruction} is "[":
						add 1 to {_depth}
					add 1 to {_reader}

		# Loop tail
		else if {_instruction} is "]":

			# Repeat loop if data is non-zero
			if {_data::%{_pointer}%} ? 0 is not 0:

				# Move reader to head of loop
				remove 1 from {_reader}
				loop {_reader} times:
					set {_instruction} to character at {_reader} of {_input}
					if {_instruction} is "[":
						exit this loop if {_depth} <= 0
						remove 1 from {_depth}
					else if {_instruction} is "]":
						add 1 to {_depth}
					remove 1 from {_reader}
				remove 1 from {_reader}

		# Write to output string
		# This converts the integer data to characters
		else if {_instruction} is ".":
			set {_output} to join {_output}, character from {_data::%{_pointer}%}

	return {_output}