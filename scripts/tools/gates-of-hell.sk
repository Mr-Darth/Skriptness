# Gates of Hell
#
# This script allows opening up Skript's registrations for a limited amount of
# time in order to load specific classes (e.g. registering new elements).
#
# **This is a dangerous procedure!**
# **If registrations are not properly closed again, Skript becomes unusable!**
#
# This works by generating a class with special methods to access private members
# of `ch.njol.skript.Skript` via the MethodHandles (java.lang.invoke) API.
# Opening is done by simply setting the `acceptRegistrations` field to `true`.
# Closing executes the method `Skript#stopAcceptingRegistrations()` to ensure
# all changes are accounted for.
# Note: This script also copies previous classinfos to avoid their loss.
#
# When using the load effect, a new instance of the given class is created.
# (This method was initially designed for adding new hooks, since hooks use
# their constructor to load elements. Other behaviour might be added in the future.)

# Authored by Mr. Darth.
# Tested using Skript 2.7.0-beta3 and skript-reflect 2.4-dev1 on Paper 1.20.1 and OpenJDK 17.



options:
    # The simple name of the class to generate.
    class-name: GatesOfHell

    # The package of the generated classes.
    # skript-reflect's Lookup is used to define classes, thus the packages must be the same.
    # This must not be changed!
    defining-package: com.btk5h.skriptmirror.util.lookup

import:
    com.btk5h.skriptmirror.util.lookup.LookupGetter
    org.objectweb.asm.ClassWriter
    org.objectweb.asm.Opcodes
    org.objectweb.asm.Type

# Loading the class is handled by a special effect.
# This can load classes at parse time, so that they can be used in the script directly.
# The effect should be used before actually referencing the generated classes.
effect load (hack|gates of hell) classes:
    parse: # Parse time hack :)

        set {_class-name} to "{@defining-package}.{@class-name}"

        # Don't double load to avoid error
        continue if class {_class-name} exists

        set {_binary-name} to {_class-name}.replace(".", "/")

        # Note: The bytecode generated by this is loose.
        # The Java Language Specification wouldn't allow
        # some of the code written here.
        set {_writer} to new ClassWriter(Opcodes.ASM9)

        {_writer}.visit(Opcodes.V17, Opcodes.ACC_PUBLIC + Opcodes.ACC_FINAL, {_binary-name}, null, "java/lang/Object", null)

        {_writer}.visitInnerClass("java/lang/invoke/MethodHandles$Lookup", "java/lang/invoke/MethodHandles", "Lookup", Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC + Opcodes.ACC_FINAL)

        {_writer}.visitField(Opcodes.ACC_PRIVATE + Opcodes.ACC_STATIC + Opcodes.ACC_FINAL, "ACCEPT_REGISTRATIONS", "Ljava/lang/invoke/MethodHandle;", null, null).visitEnd()
        {_writer}.visitField(Opcodes.ACC_PRIVATE + Opcodes.ACC_STATIC + Opcodes.ACC_FINAL, "STOP_ACCEPTING_REGISTRATIONS", "Ljava/lang/invoke/MethodHandle;", null, null).visitEnd()
        {_writer}.visitField(Opcodes.ACC_PRIVATE + Opcodes.ACC_STATIC + Opcodes.ACC_FINAL, "CLASSINFOS", "Ljava/lang/invoke/MethodHandle;", null, null).visitEnd()
        {_writer}.visitField(Opcodes.ACC_PRIVATE + Opcodes.ACC_STATIC + Opcodes.ACC_FINAL, "TEMP_CLASSINFOS", "Ljava/lang/invoke/MethodHandle;", null, null).visitEnd()

        set {_method-visitor} to {_writer}.visitMethod(Opcodes.ACC_PUBLIC, "<init>", "()V", null, null)
        {_method-visitor}.visitCode()
        {_method-visitor}.visitVarInsn(Opcodes.ALOAD, 0)
        {_method-visitor}.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false)
        {_method-visitor}.visitInsn(Opcodes.RETURN)
        {_method-visitor}.visitMaxs(1, 1)
        {_method-visitor}.visitEnd()

        set {_method-visitor} to {_writer}.visitMethod(Opcodes.ACC_STATIC, "<clinit>", "()V", null, null)
        {_method-visitor}.visitCode()
        {_method-visitor}.visitLdcInsn(Type.getType("Lch/njol/skript/Skript;"))
        {_method-visitor}.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/invoke/MethodHandles", "lookup", "()Ljava/lang/invoke/MethodHandles$Lookup;", false)
        {_method-visitor}.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/invoke/MethodHandles", "privateLookupIn", "(Ljava/lang/Class;Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/invoke/MethodHandles$Lookup;", false)
        {_method-visitor}.visitInsn(Opcodes.DUP)
        {_method-visitor}.visitLdcInsn(Type.getType("Lch/njol/skript/Skript;"))
        {_method-visitor}.visitLdcInsn("acceptRegistrations")
        {_method-visitor}.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/Boolean", "TYPE", "Ljava/lang/Class;")
        {_method-visitor}.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/invoke/MethodHandles$Lookup", "findStaticSetter", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;", false)
        {_method-visitor}.visitFieldInsn(Opcodes.PUTSTATIC, {_binary-name}, "ACCEPT_REGISTRATIONS", "Ljava/lang/invoke/MethodHandle;")
        {_method-visitor}.visitLdcInsn(Type.getType("Lch/njol/skript/Skript;"))
        {_method-visitor}.visitLdcInsn("stopAcceptingRegistrations")
        {_method-visitor}.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/Void", "TYPE", "Ljava/lang/Class;")
        {_method-visitor}.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/invoke/MethodType", "methodType", "(Ljava/lang/Class;)Ljava/lang/invoke/MethodType;", false)
        {_method-visitor}.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/invoke/MethodHandles$Lookup", "findStatic", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;", false)
        {_method-visitor}.visitFieldInsn(Opcodes.PUTSTATIC, {_binary-name}, "STOP_ACCEPTING_REGISTRATIONS", "Ljava/lang/invoke/MethodHandle;")
        {_method-visitor}.visitLdcInsn(Type.getType("Lch/njol/skript/registrations/Classes;"))
        {_method-visitor}.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/invoke/MethodHandles", "lookup", "()Ljava/lang/invoke/MethodHandles$Lookup;", false)
        {_method-visitor}.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/invoke/MethodHandles", "privateLookupIn", "(Ljava/lang/Class;Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/invoke/MethodHandles$Lookup;", false)
        {_method-visitor}.visitInsn(Opcodes.DUP)
        {_method-visitor}.visitLdcInsn(Type.getType("Lch/njol/skript/registrations/Classes;"))
        {_method-visitor}.visitLdcInsn("classInfos")
        {_method-visitor}.visitLdcInsn(Type.getType("[Lch/njol/skript/classes/ClassInfo;"))
        {_method-visitor}.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/invoke/MethodHandles$Lookup", "findStaticGetter", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;", false)
        {_method-visitor}.visitFieldInsn(Opcodes.PUTSTATIC, {_binary-name}, "CLASSINFOS", "Ljava/lang/invoke/MethodHandle;")
        {_method-visitor}.visitLdcInsn(Type.getType("Lch/njol/skript/registrations/Classes;"))
        {_method-visitor}.visitLdcInsn("tempClassInfos")
        {_method-visitor}.visitLdcInsn(Type.getType("Ljava/util/List;"))
        {_method-visitor}.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/invoke/MethodHandles$Lookup", "findStaticGetter", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;", false)
        {_method-visitor}.visitFieldInsn(Opcodes.PUTSTATIC, {_binary-name}, "TEMP_CLASSINFOS", "Ljava/lang/invoke/MethodHandle;")
        {_method-visitor}.visitInsn(Opcodes.RETURN)
        {_method-visitor}.visitMaxs(5, 0)
        {_method-visitor}.visitEnd()

        set {_method-visitor} to {_writer}.visitMethod(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC, "open", "()V", null, null)
        {_method-visitor}.visitCode()
        {_method-visitor}.visitFieldInsn(Opcodes.GETSTATIC, {_binary-name}, "ACCEPT_REGISTRATIONS", "Ljava/lang/invoke/MethodHandle;")
        {_method-visitor}.visitInsn(Opcodes.ICONST_1)
        {_method-visitor}.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/invoke/MethodHandle", "invoke", "(Z)V", false)
        {_method-visitor}.visitInsn(Opcodes.RETURN)
        {_method-visitor}.visitMaxs(2, 0)
        {_method-visitor}.visitEnd()

        set {_method-visitor} to {_writer}.visitMethod(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC, "close", "()V", null, null)
        {_method-visitor}.visitCode()
        {_method-visitor}.visitFieldInsn(Opcodes.GETSTATIC, {_binary-name}, "TEMP_CLASSINFOS", "Ljava/lang/invoke/MethodHandle;")
        {_method-visitor}.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/invoke/MethodHandle", "invoke", "()Ljava/util/List;", false)
        {_method-visitor}.visitFieldInsn(Opcodes.GETSTATIC, {_binary-name}, "CLASSINFOS", "Ljava/lang/invoke/MethodHandle;")
        {_method-visitor}.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/invoke/MethodHandle", "invoke", "()[Lch/njol/skript/classes/ClassInfo;", false)
        {_method-visitor}.visitMethodInsn(Opcodes.INVOKESTATIC, "java/util/Arrays", "asList", "([Ljava/lang/Object;)Ljava/util/List;", false)
        {_method-visitor}.visitMethodInsn(Opcodes.INVOKEINTERFACE, "java/util/List", "addAll", "(Ljava/util/Collection;)Z", true)
        {_method-visitor}.visitInsn(Opcodes.POP)
        {_method-visitor}.visitFieldInsn(Opcodes.GETSTATIC, {_binary-name}, "STOP_ACCEPTING_REGISTRATIONS", "Ljava/lang/invoke/MethodHandle;")
        {_method-visitor}.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/invoke/MethodHandle", "invoke", "()V", false)
        {_method-visitor}.visitInsn(Opcodes.RETURN)
        {_method-visitor}.visitMaxs(2, 0)
        {_method-visitor}.visitEnd()

        set {_method-visitor} to {_writer}.visitMethod(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC, "load", "(Ljava/lang/Class;)V", "(Ljava/lang/Class<*>;)V", null)
        {_method-visitor}.visitCode()
        {_method-visitor}.visitMethodInsn(Opcodes.INVOKESTATIC, {_binary-name}, "open", "()V", false)
        {_method-visitor}.visitVarInsn(Opcodes.ALOAD, 0)
        {_method-visitor}.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/Class", "newInstance", "()Ljava/lang/Object;", false)
        {_method-visitor}.visitInsn(Opcodes.POP)
        {_method-visitor}.visitMethodInsn(Opcodes.INVOKESTATIC, {_binary-name}, "close", "()V", false)
        {_method-visitor}.visitInsn(Opcodes.RETURN)
        {_method-visitor}.visitMaxs(1, 1)
        {_method-visitor}.visitEnd()

        {_writer}.visitEnd()
        set {_bytecode} to {_writer}.toByteArray()

        LookupGetter.getLookup().defineClass({_bytecode})

        continue
    trigger: # Don't do anything
        stop

# Opens up Skript's registrations and makes a new instance of the given class.
# This method was designed for adding new hooks, since hooks use heir constructor
# to load elements. Other behaviour might be added in the future.
effect:
    patterns:
        # TODO: Extend loading behaviour; allow string references
        load %javatype% with (open registrations|registrations open)
        (unsafe[ly] load|load unsafe[ly]) %javatype%
        open [up] [the] gates of hell for %javatype%
    parse:
        # This being in the parse section makes no real difference,
        # since the class is loaded when this statement is parsed.
        load gates of hell classes
        continue
    trigger:
        (class "{@defining-package}.{@class-name}").load(expr-1)